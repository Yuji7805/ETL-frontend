# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type ControlObject @aws_cognito_user_pools {
	tenantId: String!
	code: String!
	description: String!
	fields: [ControlObjectField]
	image: String
	labels: [String]
}

type ControlObjectConnection @aws_cognito_user_pools {
	items: [ControlObject]
	nextToken: String
}

type ControlObjectField @aws_cognito_user_pools {
	code: String!
	description: String!
	key: Boolean!
	type: String!
}

type ControlObjectLabel @aws_cognito_user_pools {
	tenantId: String!
	code: String!
	description: String!
	color: String
}

type ControlObjectLabelConnection @aws_cognito_user_pools {
	items: [ControlObjectLabel]
	nextToken: String
}

input CreateControlObjectInput {
	tenantId: String!
	code: String!
	description: String!
	image: String
	labels: [String]
}

input CreateControlObjectLabelInput {
	tenantId: String!
	code: String!
	description: String!
	color: String
}

input DeleteControlObjectInput {
	tenantId: String!
	code: String!
}

input DeleteControlObjectLabelInput {
	tenantId: String!
	code: String!
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
	ne: Boolean
	eq: Boolean
}

input ModelSubscriptionFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	in: [Float]
	notIn: [Float]
}

input ModelSubscriptionIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	in: [ID]
	notIn: [ID]
}

input ModelSubscriptionIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	in: [Int]
	notIn: [Int]
}

input ModelSubscriptionStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	in: [String]
	notIn: [String]
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input TableTenantFilterInput {
	tenantId: TableStringFilterInput!
}

input UpdateControlObjectFieldInput {
	code: String!
	description: String
	key: Boolean
	type: String
}

input UpdateControlObjectInput {
	tenantId: String!
	code: String!
	description: String
	fields: [UpdateControlObjectFieldInput]
	image: String
	labels: [String]
}

input UpdateControlObjectLabelInput {
	tenantId: String!
	code: String!
	description: String
	color: String
}

type Mutation {
	createControlObject(input: CreateControlObjectInput!): ControlObject
		@aws_cognito_user_pools
	updateControlObject(input: UpdateControlObjectInput!): ControlObject
		@aws_cognito_user_pools
	deleteControlObject(input: DeleteControlObjectInput!): ControlObject
		@aws_cognito_user_pools
	createControlObjectLabel(input: CreateControlObjectLabelInput!): ControlObjectLabel
		@aws_cognito_user_pools
	updateControlObjectLabel(input: UpdateControlObjectLabelInput!): ControlObjectLabel
		@aws_cognito_user_pools
	deleteControlObjectLabel(input: DeleteControlObjectLabelInput!): ControlObjectLabel
		@aws_cognito_user_pools
}

type Query {
	getControlObject(tenantId: String!, code: String!): ControlObject
		@aws_cognito_user_pools
	getControlObjectLabel(tenantId: String!, code: String!): ControlObjectLabel
		@aws_cognito_user_pools
	listControlObjects(filter: TableTenantFilterInput, limit: Int, nextToken: String): ControlObjectConnection
		@aws_cognito_user_pools
	listControlObjectLabel(filter: TableTenantFilterInput, limit: Int, nextToken: String): ControlObjectLabelConnection
		@aws_cognito_user_pools
}

type Subscription {
	onCreateControlObject(
		tenantId: String,
		code: String,
		description: String,
		image: String,
		label: [String]
	): ControlObject
		@aws_subscribe(mutations: ["createControlObject"])
	onUpdateControlObject(
		tenantId: String,
		code: String,
		description: String,
		image: String,
		label: [String]
	): ControlObject
		@aws_subscribe(mutations: ["updateControlObject"])
	onDeleteControlObject(
		tenantId: String,
		code: String,
		description: String,
		image: String,
		label: [String]
	): ControlObject
		@aws_subscribe(mutations: ["deleteControlObject"])
	onCreateControlObjectLabel(
		tenantId: String,
		code: String,
		description: String,
		color: String
	): ControlObjectLabel
		@aws_subscribe(mutations: ["createControlObjectLabel"])
	onUpdateControlObjectLabel(
		tenantId: String,
		code: String,
		description: String,
		color: String
	): ControlObjectLabel
		@aws_subscribe(mutations: ["updateControlObjectLabel"])
	onDeleteControlObjectLabel(
		tenantId: String,
		code: String,
		description: String,
		color: String
	): ControlObjectLabel
		@aws_subscribe(mutations: ["deleteControlObjectLabel"])
}